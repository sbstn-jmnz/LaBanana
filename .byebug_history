c
        @market.try_execute(@market.orders.last)
@market.orders.last
order
@market
c
oposite_orders(order)
self
c
right_price_orders(orders.last)
right_price_orders(@market.orders.last)
right_price_orders(orders.last)
right_price_orders(order)
@market.orders.last
 @market.try_execute(@market.orders.last)
@market
market
c
oposite_orders(order)
c
order
order.buy?
c
order.buy?
c
order.buy?
order.buy
order
c
order
oposite_orders(order).select {|candidate| candidate.value <= order.value}
oposite_orders(order)
opodite_orders(order)
opoditr_orders(order)
order.buy?
c
@market.oposite_orders(@market.orders.last)
@market.orders.last.buy?
@market.oposite_orders(@market.orders.last)
@market.right_price_orders(@market.orders.last)
@market.orders.last.buy?
@market.orders.last.boy?
@market.orders.last
@market.right_price_orders(@market.orders.last)
@market.right_price_orders(market.orders.last)
@market
qmarket
c
oposite_orders(order).select { |candidate| candidate.value >= order.value }
oposite_orders(order).select { |candidate| candidate.value <= order.value }
oposite_orders(order).select { |candidate|         candidate.value <= order.value
        candidate.value <= order.value
oposite_orders(order).select do |candidate|
oposite_orders(order)
order.buy?
right_price_orders(order)
rigth_price_orders(order)
order
c
n
@market.orders.last
up
c
oposite_orders(order)
right_price_orders(order)
 1.0 <= order.value
 candidate.value <= order.value
order.value
oposite_orders(order).first.value
oposite_orders(order)
order.buy?
candidate_orders
order
c
@market
up
order
exit
@market.orders
up
order
c
continue
exit
q
c
back
b
p
order
c
order
exit
order
order.type
c
order.type
c
order
c
order
order.type
c
order.type
ordertype
order
candidate.type
candidate
c
pending_orders.reject { |candidate| candidate.type == order.type }
order.type
pending_orders.reject { |candidate| candidate.type == order.type }
order.type
pending_orders
order
